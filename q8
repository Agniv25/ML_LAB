from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.metrics import silhouette_score

# Load the iris dataset
iris = load_iris()

# Create DataFrame for features and target
data = pd.DataFrame(iris.data, columns=iris.feature_names)
target = pd.DataFrame(iris.target, columns=['target'])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2, random_state=42)

# Function to plot KMeans clustering results
def plot(scaled_features, K_Means, k):
    plt.figure(figsize=(10, 10))
    plt.scatter(scaled_features[:, 0], scaled_features[:, 1], c=K_Means.labels_, cmap='rainbow')
    centers = K_Means.cluster_centers_
    plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.75)
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.title(f'k={k}')
    plt.show()

# Convert DataFrame to numpy array for KMeans
X_train_np = X_train.to_numpy()

# KMeans with 2 clusters
kmeans2 = KMeans(n_clusters=2, n_init=10)
kmeans2.fit(X_train_np)
plot(X_train_np, kmeans2, 2)
print(f'Silhouette Score for k=2: {silhouette_score(X_train_np, kmeans2.labels_)}')

# KMeans with 3 clusters
kmeans3 = KMeans(n_clusters=3, n_init=10)
kmeans3.fit(X_train_np)
plot(X_train_np, kmeans3, 3)
print(f'Silhouette Score for k=3: {silhouette_score(X_train_np, kmeans3.labels_)}')

# KMeans with 4 clusters
kmeans4 = KMeans(n_clusters=4, n_init=10)
kmeans4.fit(X_train_np)
plot(X_train_np, kmeans4, 4)
print(f'Silhouette Score for k=4: {silhouette_score(X_train_np, kmeans4.labels_)}')
